# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Geodms
                                 A QGIS plugin
 Geodms plugin for qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-28
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Object Vision BV
        email                : eoudejans@objectvision.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QAbstractItemModel
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTreeView

import sys
sys.path.append('C:/dev/geodms/geodms_v17/bin/Release/x64')
from geodms import geodms as geodms_bindings

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .geodms_dockwidget import GeodmsDockWidget
import os.path


class GeodmsModel(QAbstractItemModel):
    def __init__(self, root):
        self.root_treeitem = root
        return

    def set_root(self, root):
        self.root_treeitem = root

    def reset(self):
        self.beginResetModel()
        self.endResetModel()
        return

    def root(self):
        return self.root_treeitem
    
    def headerData(self, section, orientation, role):
        return None

    def get_treeitem(self, index):
        return index.internalPointer()
    
    def get_row(self, treeitem):
        return
    
    def get_treeitem_or_root(self, index):
        treeitem = self.get_treeitem(index)
        if not treeitem:
            return self.root_treeitem
        return treeitem

    def index(self, row, column, parent):
        if not self.hasIndex(row, column, parent):
            return QtCore.QModelIndex()
        
        treeitem = self.get_treeitem_or_root(parent)
        assert(treeitem)
        
        curr_row:int = 0
        treeitem = treeitem_GetFirstSubItem(treeitem)
        while(treeitem):
            #TODO: check if ti is hidden here
            if curr_row == row:
                return self.createIndex(row, column, treeitem)
            treeitem = treeitem_GetNextItem(treeitem)
            row+=1
            
        print(f"Warning: could not index row {row} for parent {parent}")
        return QtCore.QModelIndex()

    def parent(self, child):
        if not child.isValid():
            return QtCore.QModelIndex()
        
        treeitem = self.get_treeitem(child)
        assert(treeitem)
        parent = treeitem.parent()
        if not parent:
            return QtCore.QModelIndex()
        
        return self.createIndex(self.get_row(parent), 0, parent);

    def rowCount(self, parent):
        number_of_rows:int = 0

        parent_treeitem = self.get_treeitem_or_root(parent)
        treeitem = treeitem_GetFirstSubItem(parent_treeitem)
        while(treeitem):
            if treeitem.is_hidden(): # also add show hidden items flag in check
                continue
            number_of_rows+=1
        return number_of_rows

    def columnCount(self, parent):
        return 1

    def data(self, index, role):
        if not index.isValid():
            return None
        
        treeitem = self.get_treeitem_or_root(index)
        if not treeitem:
            return None

        treeitem.update_metainfo()
        
        if role == Qt.DecorationRole:
            return None #getTreeItemIcon(index);
        elif role == Qt.EditRole or role == Qt.DisplayRole:
            return treeitem.name()
        elif role == Qt.ForegroundRole:
            return None # getTreeItemColor(index);
        elif role == Qt.BackgroundRole:
            '''if (ti->WasFailed() && !MainWindow::TheOne()->m_treeview->selectionModel()->selectedIndexes().empty()
                && MainWindow::TheOne()->m_treeview->selectionModel()->selectedIndexes().at(0) == index) {
                return QColor(150, 0, 0);
            }

            if (ti->WasFailed())
                return QColor(255, 0, 0);

            switch (TreeItem_GetSupplierLevel(ti)) {
            case supplier_level::calc: return QColor(158, 201, 226); // clSkyBlue;
            case supplier_level::meta: return QColor(192, 220, 192); // $C0DCC0 clMoneyGreen;
            case supplier_level::calc_source: return QColor(000, 000, 255); // clBlue;
            case supplier_level::meta_source: return QColor(000, 255, 000); // clGreen;
            }
            break; // default background color'''
            return None
        elif role == Qt.SizeHintRole:
            '''auto font = QApplication::font();
            auto font_metrics = QFontMetrics(font);
            int pixels_wide = font_metrics.horizontalAdvance(ti->GetName().c_str()) + 50;
            int pixels_high = font_metrics.height();
            return QSize(pixels_wide, pixels_high);'''
            return None
        elif role == Qt.FontRole:
            return None # QApplication::font();
        return None

    def has_children(self, parent):
        treeitem = self.get_treeitem_or_root(parent)
        if not treeitem:
            return False
        
        #if (ti->Was(PS_MetaInfo))
		#	return ti->_GetFirstSubItem() != nullptr;
        first_child = treeitem.first_subitem()
        return first_child

    def flags(self, index):
        if not index.isValid():
            return QtCore.Qt.NoItemFlags

        return Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsDragEnabled | QAbstractItemModel.flags(index)

    def get_treeitem_icon(self, index):
        '''
        	auto ti = GetTreeItemOrRoot(index);
            if (!ti)
                return QVariant();

            bool isTemplate = ti->IsTemplate();

            // TODO, CODE CLEAN-UP: All followwing code return a QVariant::fromValue(QPixmap(CharPtr)
            // so we can factor the postprocessing after resource determination out and/or use a map to store the pixmaps and return the right one.

            if (isTemplate)
                return QVariant::fromValue(QPixmap(":/res/images/TV_template.bmp")); 

            bool isInTemplate = ti->InTemplate();
            auto vsflags = SHV_GetViewStyleFlags(ti);

            if (vsflags & ViewStyleFlags::vsfMapView) 
                return isInTemplate 
                ? QVariant::fromValue(QPixmap(":/res/images/TV_globe_bw.bmp")) 
                : QVariant::fromValue(QPixmap(":/res/images/TV_globe.bmp"));

            if (vsflags & ViewStyleFlags::vsfTableContainer)
                return isInTemplate 
                ? QVariant::fromValue(QPixmap(":/res/images/TV_container_table_bw.bmp")) 
                : QVariant::fromValue(QPixmap(":/res/images/TV_container_table.bmp"));

            if (vsflags & ViewStyleFlags::vsfTableView)
                return isInTemplate 
                ? QVariant::fromValue(QPixmap(":/res/images/TV_table_bw.bmp")) 
                : QVariant::fromValue(QPixmap(":/res/images/TV_table.bmp"));

            if (vsflags & ViewStyleFlags::vsfPaletteEdit)
                return isInTemplate 
                ? QVariant::fromValue(QPixmap(":/res/images/TV_palette_bw.bmp")) 
                : QVariant::fromValue(QPixmap(":/res/images/TV_palette.bmp"));

            if (vsflags & ViewStyleFlags::vsfContainer) 
                return isInTemplate 
                ? QVariant::fromValue(QPixmap(":/res/images/TV_container_bw.bmp")) 
                : QVariant::fromValue(QPixmap(":/res/images/TV_container.bmp"));

            bool isDataItem = IsDataItem(ti);
            if (isDataItem)
                return isInTemplate
                ? QVariant::fromValue(QPixmap(":/res/images/TV_table_bw.bmp"))
                : QVariant::fromValue(QPixmap(":/res/images/TV_table.bmp"));

            return QVariant::fromValue(QPixmap(":/res/images/TV_unit_transpa
        '''
        return None
    
    def get_treeitem_color(self, index):
        '''
        	auto ti = GetTreeItemOrRoot(index);
            assert(ti);
            
            if (!show_state_colors)
                return QColor(0,0,0); // black

            if (ti->WasFailed())
                return QColor(255, 255, 255); // white

            auto co = getColorOption(ti);
            return GetUserQColor(co);
        '''
        return

class GeodmsQgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Geodms_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geodms')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Geodms')
        self.toolbar.setObjectName(u'Geodms')

        #print "** INITIALIZING Geodms"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Geodms', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geodms/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Geodms'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING Geodms"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD Geodms"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Geodms'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        
        #print(f"geodms module: {geodms_bindings} {dir(geodms_bindings)}")
        #dms_version = geodms_bindings.version()
        #print(dms_version)

        # init engine
        #dms_engine = geodms_bindings.Engine()
        #print(dms_engine)

        #dms_config = "C:/prj/GeoDMS-Test/Storage_gdal/cfg/regression.dms"
        #dms_config = dms_engine.load_config(dms_config)
        #root = dms_config.root()
        #print(root)
        
        #self.model = GeodmsModel(root)
        #self.treeview = QTreeView()
        #self.treeview.setModel(self.model)

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING Geodms"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = GeodmsDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addTabifiedDockWidget(Qt.LeftDockWidgetArea, self.dockwidget, raiseTab=True)
            #self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)

            print(self.dockwidget.widget())
            self.dockwidget.show()
